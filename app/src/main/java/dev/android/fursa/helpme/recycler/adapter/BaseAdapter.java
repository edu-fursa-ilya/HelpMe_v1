package dev.android.fursa.helpme.recycler.adapter;import android.support.v4.util.ArrayMap;import android.support.v7.widget.RecyclerView;import android.view.ViewGroup;import java.util.ArrayList;import java.util.List;import dev.android.fursa.helpme.recycler.holder.BaseViewHolder;import dev.android.fursa.helpme.recycler.model.BaseViewModel;public class BaseAdapter extends RecyclerView.Adapter<BaseViewHolder<BaseViewModel>> {    private List<BaseViewModel> list = new ArrayList<>();    private ArrayMap<Integer, BaseViewModel> mTypesInstances = new ArrayMap<>();    @Override    public BaseViewHolder<BaseViewModel> onCreateViewHolder(ViewGroup parent, int viewType) {        return mTypesInstances.get(viewType).createViewHolder(parent);    }    @Override    public void onBindViewHolder(BaseViewHolder<BaseViewModel> holder, int position) {        holder.bindViewHolder(getItem(position));    }    @Override    public int getItemViewType(int position) {        return getItem(position).getType().getValue();    }    @Override    public void onViewRecycled(BaseViewHolder<BaseViewModel> holder) {        super.onViewRecycled(holder);        holder.unbindViewHolder();    }    @Override    public int getItemCount() {        return list.size();    }    public BaseViewModel getItem(int position) {        return list.get(position);    }    public void registerTypeInstance(BaseViewModel item) {        if(!mTypesInstances.containsKey(item.getType().getValue())) {            mTypesInstances.put(item.getType().getValue(), item);        }    }    public void addItems(List<? extends BaseViewModel> newItems) {        for (BaseViewModel newItem: newItems) {            registerTypeInstance(newItem);        }        list.addAll(newItems);        notifyDataSetChanged();    }    public void addFixedItems(List<? extends BaseViewModel> newItems) {        for (BaseViewModel newItem: newItems) {            registerTypeInstance(newItem);        }        list.addAll(newItems);        notifyDataSetChanged();    }    public void setItems(List<? extends BaseViewModel> items) {        addItems(items);        notifyDataSetChanged();    }    public void clearList() {        list.clear();    }}